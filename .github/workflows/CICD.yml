name: CI

permissions:
  contents: write          # needed to push & open PRs
  pull-requests: write     # needed to open PRs
  id-token: write

on:
  workflow_dispatch:
    inputs:
      organization_code:
        description: 'Organization Code'
        required: true
        default: 'mf'
      lob_code:
        description: 'lob Code'
        required: true
        default: 'daia'
      app_code:
        description: 'Application Code'
        required: true
        default: 'azraaa'
      application_name:
        description: 'Infra repo name'
        required: true
        default: 'sampleapp'
      application_platform:
        description: 'Application Platform'
        required: true
        default: 'reactjs'
      environments:
        description: "Environments JSON"
        required: true
        default: '[{"name":"Development","code":"dev","subscription_id":""},{"name":"QA","code":"qat","subscription_id":""}]'

jobs:
  terraform-format:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - run: terraform fmt -check -recursive

  terraform-validate:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - run: terraform validate

  terraform-tfsec:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - uses: aquasecurity/tfsec-action@v1.0.0

  terraform-checkov:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      # - uses: bridgecrewio/checkov-action@v12
      #   with:
      #     directory: .
      #     framework: terraform

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [terraform-format, terraform-validate, terraform-tfsec, terraform-checkov]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Generate terraform.tfvars from template
        run: python scripts/templatize.py
        env:
          ORGANIZATION_CODE: ${{ github.event.inputs.organization_code }}
          LOB_CODE: ${{ github.event.inputs.lob_code }}
          APP_CODE: ${{ github.event.inputs.app_code }}
          APP_NAME: ${{ github.event.inputs.application_name }}
          APP_PLATFORM: ${{ github.event.inputs.application_platform }}
          APP_ENVT: ${{ github.event.inputs.environments }}
          GH_TOKEN_FOUNDATION: ${{ secrets.GH_TOKEN_FOUNDATION }}
          AZURE_SUBSCRIPTION_ID_FOUNDATION: ${{ secrets.AZURE_SUBSCRIPTION_ID_FOUNDATION }}
          TF_API_TOKEN_FOUNDATION: ${{ secrets.TF_API_TOKEN_FOUNDATION }}
          AAD_CLIENT_ID_FOUNDATION: ${{ secrets.AAD_CLIENT_ID_FOUNDATION }}
          AAD_CLIENT_SECRET_FOUNDATION: ${{ secrets.AAD_CLIENT_SECRET_FOUNDATION }}
          AZURE_CREDENTIALS_FOUNDATION: ${{ secrets.AZURE_CREDENTIALS_FOUNDATION }}
          GH_TOKEN_INFRA: ${{ secrets.GH_TOKEN_INFRA }}
          AZURE_SUBSCRIPTION_ID_INFRA: ${{ secrets.AZURE_SUBSCRIPTION_ID_INFRA }}
          TF_API_TOKEN_INFRA: ${{ secrets.TF_API_TOKEN_INFRA }}
          AAD_CLIENT_ID_INFRA: ${{ secrets.AAD_CLIENT_ID_INFRA }}
          AAD_CLIENT_SECRET_INFRA: ${{ secrets.AAD_CLIENT_SECRET_INFRA }}
          AZURE_CREDENTIALS_INFRA: ${{ secrets.AZURE_CREDENTIALS_INFRA }}
          GH_TOKEN_APP: ${{ secrets.GH_TOKEN_APP }}
          AZURE_SUBSCRIPTION_ID_APP: ${{ secrets.AZURE_SUBSCRIPTION_ID_APP }}
          TF_API_TOKEN_APP: ${{ secrets.TF_API_TOKEN_APP }}
          AAD_CLIENT_ID_APP: ${{ secrets.AAD_CLIENT_ID_APP }}
          AAD_CLIENT_SECRET_APP: ${{ secrets.AAD_CLIENT_SECRET_APP }}
          AZURE_CREDENTIALS_APP: ${{ secrets.AZURE_CREDENTIALS_APP }}
      - run: cat terraform.tfvars
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - name: Terraform Plan
        run: terraform plan -out=plan.out
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
          TF_VAR_tfe_token: ${{ secrets.TF_API_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: plan.out

  checkov:
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
      - run: terraform show -json plan.out > tfplan.json
      # - uses: bridgecrewio/checkov-action@master
      #   with:
      #     file: tfplan.json

  compliance:
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
      - run: terraform show -json plan.out > tfplan.json
      - run: pip install terraform-compliance
      # - run: terraform-compliance -p tfplan.json -f features/

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [checkov, compliance]
    outputs:
      repos: ${{ steps.capture.outputs.repos }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Generate terraform.tfvars from template
        run: python scripts/templatize.py
        env:
          ORGANIZATION_CODE: ${{ github.event.inputs.organization_code }}
          LOB_CODE: ${{ github.event.inputs.lob_code }}
          APP_CODE: ${{ github.event.inputs.app_code }}
          APP_NAME: ${{ github.event.inputs.application_name }}
          APP_PLATFORM: ${{ github.event.inputs.application_platform }}
          APP_ENVT: ${{ github.event.inputs.environments }}
          GH_TOKEN_FOUNDATION: ${{ secrets.GH_TOKEN_FOUNDATION }}
          AZURE_SUBSCRIPTION_ID_FOUNDATION: ${{ secrets.AZURE_SUBSCRIPTION_ID_FOUNDATION }}
          TF_API_TOKEN_FOUNDATION: ${{ secrets.TF_API_TOKEN_FOUNDATION }}
          AAD_CLIENT_ID_FOUNDATION: ${{ secrets.AAD_CLIENT_ID_FOUNDATION }}
          AAD_CLIENT_SECRET_FOUNDATION: ${{ secrets.AAD_CLIENT_SECRET_FOUNDATION }}
          AZURE_CREDENTIALS_FOUNDATION: ${{ secrets.AZURE_CREDENTIALS_FOUNDATION }}
          GH_TOKEN_INFRA: ${{ secrets.GH_TOKEN_INFRA }}
          AZURE_SUBSCRIPTION_ID_INFRA: ${{ secrets.AZURE_SUBSCRIPTION_ID_INFRA }}
          TF_API_TOKEN_INFRA: ${{ secrets.TF_API_TOKEN_INFRA }}
          AAD_CLIENT_ID_INFRA: ${{ secrets.AAD_CLIENT_ID_INFRA }}
          AAD_CLIENT_SECRET_INFRA: ${{ secrets.AAD_CLIENT_SECRET_INFRA }}
          AZURE_CREDENTIALS_INFRA: ${{ secrets.AZURE_CREDENTIALS_INFRA }}
          GH_TOKEN_APP: ${{ secrets.GH_TOKEN_APP }}
          AZURE_SUBSCRIPTION_ID_APP: ${{ secrets.AZURE_SUBSCRIPTION_ID_APP }}
          TF_API_TOKEN_APP: ${{ secrets.TF_API_TOKEN_APP }}
          AAD_CLIENT_ID_APP: ${{ secrets.AAD_CLIENT_ID_APP }}
          AAD_CLIENT_SECRET_APP: ${{ secrets.AAD_CLIENT_SECRET_APP }}
          AZURE_CREDENTIALS_APP: ${{ secrets.AZURE_CREDENTIALS_APP }}
      - run: cat terraform.tfvars
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
      - uses: actions/download-artifact@v4
        with:
          name: tfplan
      - name: Terraform Plan (fresh out for apply)
        run: terraform plan -out=tfplan
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
          TF_VAR_tfe_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
      - name: Capture repository_names
        id: capture
        run: |
          out="$(terraform output -json repository_names || true)"
          if [ -z "$out" ] || [ "$out" = "null" ]; then
            echo 'repos=[]' >> "$GITHUB_OUTPUT"
          else
            echo "repos=$(echo "$out" | jq -c '.')" >> "$GITHUB_OUTPUT"
          fi

  per-repo:
    name: Per-repo ops (${{ matrix.repo }})
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: ${{ needs.terraform-apply.outputs.repos != '[]' && needs.terraform-apply.outputs.repos != 'null' }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        repo: ${{ fromJSON(needs.terraform-apply.outputs.repos || '[]') }}
    steps:
      - name: Checkout factory repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          path: factory

      - name: Checkout matrix repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ matrix.repo }}
          token: ${{ secrets.GH_TOKEN }}
          path: target
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate env infra files in target
        run: |
          cd target
          python3 ../factory/scripts/generate_tfvars.py
        env:
          REPO_NAME: ${{ github.repository_owner }}/${{ matrix.repo }}
          APP_ENVT: ${{ github.event.inputs.environments }}
          ORGANIZATION_CODE: ${{ github.event.inputs.organization_code }}
          LOB_CODE: ${{ github.event.inputs.lob_code }}
          APP_CODE: ${{ github.event.inputs.app_code }}
          APP_NAME: ${{ github.event.inputs.application_name }}
          APP_PLATFORM: ${{ github.event.inputs.application_platform }}

      - name: Verify Generated Files
        run: |
          echo "Generated environment directories:"
          ls -la target/
          echo ""
          echo "Files in each environment directory:"
          for env_dir in target/*/; do
            if [ -d "$env_dir" ] && [[ ! "$env_dir" =~ \.git ]]; then
              echo "=== $env_dir ==="
              ls -la "$env_dir"
              echo ""
            fi
          done

      - name: Generate unique branch name
        id: branch-name
        run: echo "name=automated-infra-generation-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Commit & Push changes
        id: push-branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: ./target
          branch: ${{ steps.branch-name.outputs.name }}
          commit_message: |
            chore: automated infrastructure files generation from factory

            Generated infrastructure files:
            - Organization Code: ${{ github.event.inputs.organization_code }}
            - LOB Code: ${{ github.event.inputs.lob_code }}
            - Application Code: ${{ github.event.inputs.app_code }}
            - Application Name: ${{ github.event.inputs.application_name }}
            - Platform: ${{ github.event.inputs.application_platform }}
            - Environments: ${{ github.event.inputs.environments }}
          create_branch: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Get Checkov skips from target repository
        id: get-checkov-skips
        run: |
          cd target
          if [ -f "checkov_skips.cfg" ]; then
            cfg_content=$(grep -v '^#' checkov_skips.cfg | tr -d '\r\n')
            echo "checkov_skips=$cfg_content" >> $GITHUB_OUTPUT
          else
            echo "checkov_skips=" >> $GITHUB_OUTPUT
          fi

      - name: Create PR to main (target repo)
        if: steps.push-branch.outputs.changes_detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}     # PAT with repo access
          path: ./target
          base: main
          branch: ${{ steps.branch-name.outputs.name }}
          title: "chore: infra files from factory – ${{ matrix.repo }}"
          body: |
            Automated infra generation.

            - Org: `${{ github.event.inputs.organization_code }}`
            - LOB: `${{ github.event.inputs.lob_code }}`
            - App: `${{ github.event.inputs.app_code }}`
            - Name: `${{ github.event.inputs.application_name }}`
            - Platform: `${{ github.event.inputs.application_platform }}`
            - Environments: `${{ github.event.inputs.environments }}`
            - Source run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          labels: iac, automated
          draft: false

      - name: Show push outputs (debug)
        run: |
          echo "changes_detected=${{ steps.push-branch.outputs.changes_detected }}"
          echo "commit_hash=${{ steps.push-branch.outputs.commit_hash }}"

     